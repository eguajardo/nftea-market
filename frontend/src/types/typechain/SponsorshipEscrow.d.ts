/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SponsorshipEscrowInterface extends ethers.utils.Interface {
  functions: {
    "MIN_DEADLINE_PERIOD_SECONDS()": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "completeSponsorship(uint256)": FunctionFragment;
    "deposit(uint256,uint256,bytes32,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "refund(uint256,address)": FunctionFragment;
    "registerSponsortship(uint256,uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sponsorshipData(uint256)": FunctionFragment;
    "stablecoin()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MIN_DEADLINE_PERIOD_SECONDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeSponsorship",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSponsortship",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sponsorshipData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stablecoin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_DEADLINE_PERIOD_SECONDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeSponsorship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerSponsortship",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sponsorshipData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stablecoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Cancel(uint256)": EventFragment;
    "Deposit(uint256,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Refund(uint256,address,uint256)": EventFragment;
    "SponsorshipComplete(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Refund"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SponsorshipComplete"): EventFragment;
}

export type CancelEvent = TypedEvent<
  [BigNumber] & { sponsorshipId: BigNumber }
>;

export type DepositEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    sponsorshipId: BigNumber;
    sponsor: string;
    amount: BigNumber;
    sponsorSum: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RefundEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    sponsorshipId: BigNumber;
    sponsor: string;
    payment: BigNumber;
  }
>;

export type SponsorshipCompleteEvent = TypedEvent<
  [BigNumber, BigNumber] & { sponsorshipId: BigNumber; funds: BigNumber }
>;

export class SponsorshipEscrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SponsorshipEscrowInterface;

  functions: {
    MIN_DEADLINE_PERIOD_SECONDS(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancel(
      sponsorshipId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    completeSponsorship(
      sponsorshipId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      sponsorshipId_: BigNumberish,
      amount_: BigNumberish,
      nonce_: BytesLike,
      validBefore_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    refund(
      sponsorshipId_: BigNumberish,
      sponsor_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerSponsortship(
      requestedAmount_: BigNumberish,
      deadline_: BigNumberish,
      beneficiary_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sponsorshipData(
      sponsorshipId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber, BigNumber] & {
        requestedAmount: BigNumber;
        deadline: BigNumber;
        active: boolean;
        sponsorsQuantity: BigNumber;
        totalFunds: BigNumber;
      }
    >;

    stablecoin(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MIN_DEADLINE_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

  cancel(
    sponsorshipId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  completeSponsorship(
    sponsorshipId_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    sponsorshipId_: BigNumberish,
    amount_: BigNumberish,
    nonce_: BytesLike,
    validBefore_: BigNumberish,
    v_: BigNumberish,
    r_: BytesLike,
    s_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  refund(
    sponsorshipId_: BigNumberish,
    sponsor_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerSponsortship(
    requestedAmount_: BigNumberish,
    deadline_: BigNumberish,
    beneficiary_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sponsorshipData(
    sponsorshipId_: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean, BigNumber, BigNumber] & {
      requestedAmount: BigNumber;
      deadline: BigNumber;
      active: boolean;
      sponsorsQuantity: BigNumber;
      totalFunds: BigNumber;
    }
  >;

  stablecoin(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MIN_DEADLINE_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      sponsorshipId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    completeSponsorship(
      sponsorshipId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[], BigNumber]>;

    deposit(
      sponsorshipId_: BigNumberish,
      amount_: BigNumberish,
      nonce_: BytesLike,
      validBefore_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    refund(
      sponsorshipId_: BigNumberish,
      sponsor_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSponsortship(
      requestedAmount_: BigNumberish,
      deadline_: BigNumberish,
      beneficiary_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sponsorshipData(
      sponsorshipId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean, BigNumber, BigNumber] & {
        requestedAmount: BigNumber;
        deadline: BigNumber;
        active: boolean;
        sponsorsQuantity: BigNumber;
        totalFunds: BigNumber;
      }
    >;

    stablecoin(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Cancel(uint256)"(
      sponsorshipId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { sponsorshipId: BigNumber }>;

    Cancel(
      sponsorshipId?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { sponsorshipId: BigNumber }>;

    "Deposit(uint256,address,uint256,uint256)"(
      sponsorshipId?: BigNumberish | null,
      sponsor?: string | null,
      amount?: null,
      sponsorSum?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        sponsorshipId: BigNumber;
        sponsor: string;
        amount: BigNumber;
        sponsorSum: BigNumber;
      }
    >;

    Deposit(
      sponsorshipId?: BigNumberish | null,
      sponsor?: string | null,
      amount?: null,
      sponsorSum?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      {
        sponsorshipId: BigNumber;
        sponsor: string;
        amount: BigNumber;
        sponsorSum: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Refund(uint256,address,uint256)"(
      sponsorshipId?: BigNumberish | null,
      sponsor?: string | null,
      payment?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { sponsorshipId: BigNumber; sponsor: string; payment: BigNumber }
    >;

    Refund(
      sponsorshipId?: BigNumberish | null,
      sponsor?: string | null,
      payment?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { sponsorshipId: BigNumber; sponsor: string; payment: BigNumber }
    >;

    "SponsorshipComplete(uint256,uint256)"(
      sponsorshipId?: BigNumberish | null,
      funds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { sponsorshipId: BigNumber; funds: BigNumber }
    >;

    SponsorshipComplete(
      sponsorshipId?: BigNumberish | null,
      funds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { sponsorshipId: BigNumber; funds: BigNumber }
    >;
  };

  estimateGas: {
    MIN_DEADLINE_PERIOD_SECONDS(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      sponsorshipId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    completeSponsorship(
      sponsorshipId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      sponsorshipId_: BigNumberish,
      amount_: BigNumberish,
      nonce_: BytesLike,
      validBefore_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    refund(
      sponsorshipId_: BigNumberish,
      sponsor_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerSponsortship(
      requestedAmount_: BigNumberish,
      deadline_: BigNumberish,
      beneficiary_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sponsorshipData(
      sponsorshipId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stablecoin(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_DEADLINE_PERIOD_SECONDS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      sponsorshipId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    completeSponsorship(
      sponsorshipId_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      sponsorshipId_: BigNumberish,
      amount_: BigNumberish,
      nonce_: BytesLike,
      validBefore_: BigNumberish,
      v_: BigNumberish,
      r_: BytesLike,
      s_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refund(
      sponsorshipId_: BigNumberish,
      sponsor_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerSponsortship(
      requestedAmount_: BigNumberish,
      deadline_: BigNumberish,
      beneficiary_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sponsorshipData(
      sponsorshipId_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stablecoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
