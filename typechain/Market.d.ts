/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MarketInterface extends ethers.utils.Interface {
  functions: {
    "registerStall(string,string)": FunctionFragment;
    "stallNameTaken(string)": FunctionFragment;
    "uri(string)": FunctionFragment;
    "vendorStallName(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "registerStall",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stallNameTaken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "uri", values: [string]): string;
  encodeFunctionData(
    functionFragment: "vendorStallName",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "registerStall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stallNameTaken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uri", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vendorStallName",
    data: BytesLike
  ): Result;

  events: {
    "StallRegistration(address,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "StallRegistration"): EventFragment;
}

export type StallRegistrationEvent = TypedEvent<
  [string, string, string] & { vendor: string; stallName: string; uri: string }
>;

export class Market extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MarketInterface;

  functions: {
    registerStall(
      stallName_: string,
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stallNameTaken(
      stallName_: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    uri(stallName_: string, overrides?: CallOverrides): Promise<[string]>;

    vendorStallName(
      vendor_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  registerStall(
    stallName_: string,
    uri_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stallNameTaken(
    stallName_: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  uri(stallName_: string, overrides?: CallOverrides): Promise<string>;

  vendorStallName(vendor_: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    registerStall(
      stallName_: string,
      uri_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    stallNameTaken(
      stallName_: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    uri(stallName_: string, overrides?: CallOverrides): Promise<string>;

    vendorStallName(
      vendor_: string,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "StallRegistration(address,string,string)"(
      vendor?: string | null,
      stallName?: string | null,
      uri?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { vendor: string; stallName: string; uri: string }
    >;

    StallRegistration(
      vendor?: string | null,
      stallName?: string | null,
      uri?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { vendor: string; stallName: string; uri: string }
    >;
  };

  estimateGas: {
    registerStall(
      stallName_: string,
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stallNameTaken(
      stallName_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uri(stallName_: string, overrides?: CallOverrides): Promise<BigNumber>;

    vendorStallName(
      vendor_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    registerStall(
      stallName_: string,
      uri_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stallNameTaken(
      stallName_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uri(
      stallName_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vendorStallName(
      vendor_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
