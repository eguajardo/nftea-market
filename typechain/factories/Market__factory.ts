/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Market, MarketInterface } from "../Market";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vendor",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "stallName",
        type: "string",
      },
      {
        indexed: true,
        internalType: "string",
        name: "uri",
        type: "string",
      },
    ],
    name: "StallRegistration",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "stallName_",
        type: "string",
      },
      {
        internalType: "string",
        name: "uri_",
        type: "string",
      },
    ],
    name: "registerStall",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "stallName_",
        type: "string",
      },
    ],
    name: "stallNameTaken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "stallName_",
        type: "string",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vendor_",
        type: "address",
      },
    ],
    name: "vendorStallName",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610cb5806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630de72b7e146100515780632e856b0014610081578063987cf4c1146100b1578063ef5c0a33146100e1575b600080fd5b61006b600480360381019061006691906106fe565b6100fd565b604051610078919061092b565b60405180910390f35b61009b600480360381019061009691906106d5565b6101f9565b6040516100a8919061092b565b60405180910390f35b6100cb60048036038101906100c691906106fe565b610311565b6040516100d89190610910565b60405180910390f35b6100fb60048036038101906100f69190610743565b61034a565b005b60606101098383610311565b610148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161013f906109ed565b60405180910390fd5b6001838360405161015a9291906108f7565b9081526020016040518091039020805461017390610ab4565b80601f016020809104026020016040519081016040528092919081815260200182805461019f90610ab4565b80156101ec5780601f106101c1576101008083540402835291602001916101ec565b820191906000526020600020905b8154815290600101906020018083116101cf57829003601f168201915b5050505050905092915050565b606061020482610575565b610243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023a906109cd565b60405180910390fd5b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805461028c90610ab4565b80601f01602080910402602001604051908101604052809291908181526020018280546102b890610ab4565b80156103055780601f106102da57610100808354040283529160200191610305565b820191906000526020600020905b8154815290600101906020018083116102e857829003601f168201915b50505050509050919050565b600080600184846040516103269291906108f7565b9081526020016040518091039020805461033f90610ab4565b905011905092915050565b60008484905011610390576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103879061094d565b60405180910390fd5b600082829050116103d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103cd9061098d565b60405180910390fd5b6103e66103e16105cb565b610575565b15610426576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041d9061096d565b60405180910390fd5b6104308484610311565b15610470576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610467906109ad565b60405180910390fd5b838360008061047d6105cb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002091906104c49291906105d3565b508181600186866040516104d99291906108f7565b908152602001604051809103902091906104f49291906105d3565b5081816040516105059291906108f7565b6040518091039020848460405161051d9291906108f7565b604051809103902061052d6105cb565b73ffffffffffffffffffffffffffffffffffffffff167f0fc7c2e9380c62e7b6717fb1740878354095d333c62e580b66a63afbf703316460405160405180910390a450505050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080546105c190610ab4565b9050119050919050565b600033905090565b8280546105df90610ab4565b90600052602060002090601f0160209004810192826106015760008555610648565b82601f1061061a57803560ff1916838001178555610648565b82800160010185558215610648579182015b8281111561064757823582559160200191906001019061062c565b5b5090506106559190610659565b5090565b5b8082111561067257600081600090555060010161065a565b5090565b60008135905061068581610c68565b92915050565b60008083601f84011261069d57600080fd5b8235905067ffffffffffffffff8111156106b657600080fd5b6020830191508360018202830111156106ce57600080fd5b9250929050565b6000602082840312156106e757600080fd5b60006106f584828501610676565b91505092915050565b6000806020838503121561071157600080fd5b600083013567ffffffffffffffff81111561072b57600080fd5b6107378582860161068b565b92509250509250929050565b6000806000806040858703121561075957600080fd5b600085013567ffffffffffffffff81111561077357600080fd5b61077f8782880161068b565b9450945050602085013567ffffffffffffffff81111561079e57600080fd5b6107aa8782880161068b565b925092505092959194509250565b6107c181610a46565b82525050565b60006107d38385610a29565b93506107e0838584610a72565b82840190509392505050565b60006107f782610a0d565b6108018185610a18565b9350610811818560208601610a81565b61081a81610b15565b840191505092915050565b6000610832601883610a18565b915061083d82610b26565b602082019050919050565b6000610855602483610a18565b915061086082610b4f565b604082019050919050565b6000610878601a83610a18565b915061088382610b9e565b602082019050919050565b600061089b602083610a18565b91506108a682610bc7565b602082019050919050565b60006108be602483610a18565b91506108c982610bf0565b604082019050919050565b60006108e1601f83610a18565b91506108ec82610c3f565b602082019050919050565b60006109048284866107c7565b91508190509392505050565b600060208201905061092560008301846107b8565b92915050565b6000602082019050818103600083015261094581846107ec565b905092915050565b6000602082019050818103600083015261096681610825565b9050919050565b6000602082019050818103600083015261098681610848565b9050919050565b600060208201905081810360008301526109a68161086b565b9050919050565b600060208201905081810360008301526109c68161088e565b9050919050565b600060208201905081810360008301526109e6816108b1565b9050919050565b60006020820190508181036000830152610a06816108d4565b9050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000610a3f82610a52565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015610a9f578082015181840152602081019050610a84565b83811115610aae576000848401525b50505050565b60006002820490506001821680610acc57607f821691505b60208210811415610ae057610adf610ae6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f4d61726b65743a20656d707479207374616c6c206e616d650000000000000000600082015250565b7f4d61726b65743a206163636f756e7420616c7265616479206f776e732061207360008201527f74616c6c00000000000000000000000000000000000000000000000000000000602082015250565b7f4d61726b65743a20656d707479206d6574616461746120555249000000000000600082015250565b7f4d61726b65743a207374616c6c206e616d6520616c72656164792074616b656e600082015250565b7f4d61726b65743a206163636f756e7420646f6573206e6f74206f776e2061207360008201527f74616c6c00000000000000000000000000000000000000000000000000000000602082015250565b7f4d61726b65743a20756e72656769737465726564207374616c6c206e616d6500600082015250565b610c7181610a34565b8114610c7c57600080fd5b5056fea26469706673582212205b53dce11d3d8864b37060d00baa4f315f918560460cbfc839c265868ccbdc0364736f6c63430008030033";

export class Market__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Market> {
    return super.deploy(overrides || {}) as Promise<Market>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Market {
    return super.attach(address) as Market;
  }
  connect(signer: Signer): Market__factory {
    return super.connect(signer) as Market__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MarketInterface {
    return new utils.Interface(_abi) as MarketInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Market {
    return new Contract(address, _abi, signerOrProvider) as Market;
  }
}
